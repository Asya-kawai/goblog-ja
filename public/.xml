<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on The Go Blog 日本語訳 </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/ymotongpoo.github.io/goblog-ja/index.xml</link>
    <language>ja-jp</language>
    
    
    <updated>Wed, 04 Feb 2015 14:49:44 JST</updated>
    
    <item>
      <title>package names</title>
      <link>http://localhost:1313/ymotongpoo.github.io/goblog-ja/package-names.html</link>
      <pubDate>Wed, 04 Feb 2015 14:49:44 JST</pubDate>
      
      <guid>http://localhost:1313/ymotongpoo.github.io/goblog-ja/package-names.html</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;パッケージ名&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;序文&lt;/h2&gt;

&lt;p&gt;Goのコードはパッケージの形で整理されています。同一パッケージ内では、どのような識別子（名前）も
参照することが可能ですが、そのパッケージを利用する場合は、パッケージが外部に公開している型、関数、
定数、変数しか参照できません。パッケージの参照元は常に接頭辞としてパッケージ名を付ける必要があります。
例えば、 &lt;code&gt;foo.Bar&lt;/code&gt; はインポートしている &lt;code&gt;foo&lt;/code&gt; というパッケージ内の &lt;code&gt;Bar&lt;/code&gt; という公開された名前を
参照しています。&lt;/p&gt;

&lt;p&gt;良いパッケージ名はコードをより良いものにします。パッケージ名は、その中身の文脈を教えてくれ、参照元で
利用しているパッケージの目的と使用方法を理解しやすくしてくれます。またパッケージ名は、次第にそれが
大きくなるにつれて、メンテナーに何がそのパッケージに入るべきで、何が入るべきでないかを決定する手助けとなります。
良い名前を付けられたパッケージは必要なコードも探しやすくなります。&lt;/p&gt;

&lt;p&gt;Effective Goではパッケージ、型、関数、変数の命名に関する
&lt;a href=&#34;https://golang.org/doc/effective_go.html#names&#34;&gt;ガイドライン&lt;/a&gt; を提供しています。
この文章ではそちらに書かれている内容をさらに発展させて、標準パッケージ内で見られる
名前について調べてみようと思います。また悪いパッケージ名についても議論し、その修正方法についても
考えてみましょう。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;パッケージ名&lt;/h2&gt;

&lt;p&gt;良いパッケージ名は短くて明確です。小文字で、アンダースコア（ &lt;code&gt;under_score&lt;/code&gt; ）がなく、
大文字小文字が混ざったもの（ &lt;code&gt;mixedCaps&lt;/code&gt; ）でもありません。簡潔な名詞であることが多いです。
たとえば次のようなものが挙げられます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; （時間や時刻を計測したり表示する機能を提供している）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; （双方向リストを実装している）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; （HTTPクライアントとサーバの実装を提供している）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他の言語で典型的な命名規則はGoのプログラムではおそらく自然なものではないでしょう。
ここに、他言語では良いスタイルとされているけれどGoでは不適切なパッケージ名の2つ例を挙げてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;computeServiceClient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;priority_queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goのパッケージではいくつかの型や関数を公開する方法をとっています。たとえば &lt;code&gt;compute&lt;/code&gt; パッケージでは
&lt;code&gt;Client&lt;/code&gt; 型とサービスを使うためにメソッドを公開したり、複数のクライアント間での処理を分割するために
関数を公開することもできるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;短縮形は慎重にを使うこと。&lt;/strong&gt; パッケージ名ではプログラマによく知られた短縮形であれば使ってもよいでしょう。
広く使われるパッケージ名はしばしば短縮形の名前になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strconv&lt;/code&gt; （string conversion、文字列の変換）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;syscall&lt;/code&gt; （system call、システムコール）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt&lt;/code&gt; （formmated I/O）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一方で、パッケージ名を短くしたせいでそのパッケージが曖昧であったり不明瞭になるようであれば、短縮をめましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ユーザから良い名前を盗まないようにしましょう。&lt;/strong&gt; クライアント側のコード内でよく使われる名前をパッケージ名に
するのはやめましょう。たとえば、バッファ済みI/Oのパッケージは &lt;code&gt;bufio&lt;/code&gt; であり、 &lt;code&gt;buf&lt;/code&gt; ではありません。
これは &lt;code&gt;buf&lt;/code&gt; がバッファ用の変数名として都合が良いものだからです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://localhost:1313/ymotongpoo.github.io/goblog-ja/about.html</link>
      <pubDate>Wed, 04 Feb 2015 11:20:36 JST</pubDate>
      
      <guid>http://localhost:1313/ymotongpoo.github.io/goblog-ja/about.html</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Go Blog 日本語訳&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/&#34;&gt;The Go Blog&lt;/a&gt; の日本語訳プロジェクトです。&lt;/p&gt;

&lt;p&gt;本家と同様に訳文本文は Creative Commons Attribution 3.0 License で公開し、
ソースコードは BSD License とします。&lt;/p&gt;

&lt;p&gt;ドキュメント本体はMarkdownをHugoでビルドしていますので、修正は &lt;code&gt;master&lt;/code&gt; ブランチへ
Pull Requestをお願いします。
&lt;a href=&#34;https://github.com/ymotongpoo/goblog-ja&#34;&gt;https://github.com/ymotongpoo/goblog-ja&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>